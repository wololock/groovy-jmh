import org.gradle.api.internal.artifacts.dsl.dependencies.DependencyFactory
import org.gradle.internal.component.local.model.OpaqueComponentIdentifier

/*
 * Copyright 2014-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sourceSets {
    functionalTest {
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom(testImplementation)
    functionalTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    pluginsUnderTest {
        canBeConsumed = false
        canBeResolved = false
    }
    pluginClasspath {
        canBeConsumed = false
        canBeResolved = true
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        extendsFrom(implementation, runtimeOnly, pluginsUnderTest)
    }
    testImplementation.extendsFrom(pluginsUnderTest)
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}

def classpathWithoutDevelopmentLibs = configurations.pluginClasspath.incoming.artifactView {config ->
    config.componentFilter {componentId ->
        if (componentId instanceof OpaqueComponentIdentifier) {
            DependencyFactory.ClassPathNotation classPathNotation = ((OpaqueComponentIdentifier) componentId).getClassPathNotation();
            return classPathNotation != DependencyFactory.ClassPathNotation.GRADLE_API && classPathNotation != DependencyFactory.ClassPathNotation.LOCAL_GROOVY;
        }
        return true;
    }
}

tasks.named('pluginUnderTestMetadata') {
    pluginClasspath.from(classpathWithoutDevelopmentLibs.files.elements)
}

def functionalTest = tasks.register("functionalTest", Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test

    reports {
        html.destination = project.file("$html.destination/functional")
        junitXml.destination = project.file("$junitXml.destination/functional")
    }
}

tasks.named("check") {
    dependsOn functionalTest
}
